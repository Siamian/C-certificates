#include <stdio.h>
#include <stdlib.h>

#define NO_OP ' '

typedef struct tree_el //stworzenie struktury o nazwie tree_el
{
    char op; //operacja
    double val; //wartosc
    int is_val_computed; //czy wartosc zostala obliczona

    struct tree_el *left; //wskaznik na strukture (w strukturze) tj. nowa gałąź w drzrzewie
    struct tree_el *right; // jak wyzej
}tree_el;

tree_el create_op(char op) //funkcja tworzaca nowa strukture typu tree_el bedąca operatorem(+,- itp)i zwracajaca ją
{
    tree_el new_el = {op, 0, 0, NULL, NULL}; //szybkie stworzenie struktury
    return new_el;                            //3 argument struktury przyjmuje 0 bo struktura nie jest liczba a operatorem ktory liczy inne liczby bedace podgaleziami struktury
}

tree_el create_val(double val) //funkcja tworzaca nowa strukture typu tree_el bedąca liczbą i zwracajaca ją
{
    tree_el new_el = {NO_OP, val, 1, NULL, NULL}; //szybkie stworzenie struktury
    return new_el;                                //3 argument struktury  tj. 1 nie jest 0  jak wyzej bo liczba ktora przyjmuje funkcja jako swoj argument jest juz policzona
}

void print_tree(tree_el* el, int level) //drukowanie w konsoli struktury drzewa argumentem musi byc wierzchołek
{
    if(el==NULL) //sprawdza czy struktura  jest wierchołkiem ewentualnie czy ma jakies podgalezie, jesli nie to konczy działanie
        return;

    for (int i=0; i<level; i++) //rysuje delikatne wyciecie dla rozroznienia poziomow co wywolanie funkcji
    {
        printf(" ");
    }
    printf("|- ");
    if (el->op != NO_OP) //sprawdza czy struktura el (ta z argumentu) jest operatorem
   {
       printf("%c\t",el->op); //drukuje operator
   } 

   if (el->is_val_computed) //jesli is_val_computed (czy liczba jest obliczona) struktury el nie jest 0 (nie jest fałszem)
   {
       printf("%.2f\n", el->val);
   }else
   {
       printf("?\n");
   }

    print_tree(el->left, level+1); //rysuje odgalezienia struktury drzewa stosując rekurecje + zwieksza wyciecie poprzez wiekszenie level
    print_tree(el->right, level+1); //przestaje jesli nie znajdzie rozgalzien tj. el==NULL
}

void evaluate(tree_el* el) //funkcja do obliczenia dzialan operatorów (struktór operatorowych???)
{
    if(el == NULL) //przerwanie rekurencji
        return;

    evaluate(el->left); //aby obliczyc aktualnie podany argument (operator) do policzenia należy wczesniej obliczyc jego podgalezie
    evaluate(el->right); //jak wyzej

    if (el->op != NO_OP) //sprawdza czy el->op jest operatorem
    {
        double a = el->left->val; //wartosc pod galezi lewej operatora
        double b = el->right->val; //wartosc pod galezi prawej operatora
        double c;

        switch (el->op) //w zaleznosci od operatora przeprowadza inne dzialanie
        {
            case '+': c = a + b; break;
            case '*': c = a * b; break;
        }

        el->val = c;   //przypisuje operatorowi warosc ktorej wczesniej nie posiadał (wartosc dzialania operatora z jego podgaleziami)
        el->is_val_computed = 1; // operator zmiania stan na wartosc obliczona z 0 na 1 (bedzie mozna ja teraz wydrukowac)
    }
}

tree_el* new_node(tree_el el) //funkcja typu wskaznik na trukture tree_el,  argumentem jest tu stworzona struktura za pomoca funkcji create_op
{
    tree_el* new_el = (tree_el*)malloc(sizeof(tree_el)); //rezerwujemy adres struktury new_el za pomoca funkcji malloc
    *new_el = el; //nadpisujemy nowo utworzona strukture new_el struktura z argumentu
    return new_el; //zwracamy wskaznik do struktury z argumentu ale juz po innym adresem
}

int main()
{
    //1+2*3

    tree_el * root; //wskaznik na strukturę tyou tree_el

    root = new_node(create_op('+'));  //przypisanie wskaznikowi root nowego adresu powstalego za pomoca new_node stworzonej strukturze za pomoca funkcji create_op
    root->left = new_node(create_val(1)); //jak wyzej tylko przypisanie nastepuje wewnatrz struktury root w elemencie   struct tree_el *left struktury root
    root->right = new_node(create_op('*')); // jak wyzej  tylko leftitd
    root->right->left = new_node(create_val(2)); //jak wyzej tylko przypisanie nastepuje wewnatrz struktury root w elemencie   struct tree_el *left struktury struct tree_el *right struktury root
    root->right->right = new_node(create_val(3)); //analogiczne jak wyzej

    print_tree(root, 0); //drukuj strukture drzewa
    evaluate(root); //oblicz wartosc dzialania operatorów
    printf("\n\n\n\n");
    print_tree(root, 0); //drukuj strukture drzewa (juz po obliczeniu dzialania operatorów)

    return 0;
}
/*         Struktura drzewa 1+2*3 :
                          ____________  +  ____________         
                         |                             |
                         1                     ______  *  ______
                                              |                 | 
                                              2                 3


*/