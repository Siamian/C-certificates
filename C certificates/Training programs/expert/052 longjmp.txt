#include <stdio.h>
#include <setjmp.h> //biblioteka do uzywania zmiennej typu jmp_buf czyli dlugich skoków
#include <stdlib.h> //dla funkcji exit()

typedef enum err_code //tworzymy zmienna do błędów
{
    no_error = 0,
    connetion_error = 1,
    measurement_error = 2
}err_code;

jmp_buf target; //zmienna globalna , tablica szesnastu intów dla obsługi dlugich skoków

void setup_errors(); //funkcja z etykietami kodów błędów

void connect_to_device();
void measure();
void disconnect_from_device();

int connection1();
int connection2();
int connection3();

int measure1();
int measure2();

int main()
{
    setup_errors(); //ustawienie etykiet długich skoków (do błędów)

    connect_to_device();
    measure();
    disconnect_from_device();

    return 0;
}

void setup_errors()
{
    switch(setjmp(target)) //wybieranie za pomocą funkcji dlugich skokow
    {
        case 0:
            break;
        case connetion_error:
            printf("Connection error\n");
            exit(connetion_error); //funkcja exit zamyka program zwracajac argument
        case measurement_error:
            printf("Measurement_error\n");
            disconnect_from_device();
            exit(measurement_error);
        default:
            printf("Unknown error\n");
            exit(-1);
    }
}

int measure1()
{
    return 0;
}
int measure2()
{
    return 0;
}

int connection1()
{
    return 0;
}
int connection2()
{
    return 0;
}
int connection3()
{
    return 0;
}

void connect_to_device()
{
    printf("Allocating resources\n");
    if (connection1() != 0)
        goto ERR;  //skok do etykiety o nazwie ERR:

    if (connection2() != 0)
        goto ERR;

    if (connection3() != 0)
        goto ERR;

    return; //musimy powrócic bo inaczej printf("Free resources\n"); wykona sie mimo wszystko, ERR nie jest warunkiem

           //etykieta ERR czyli miejsce od ktorego jest kontynuowane dzialanie programu od komendy goto ERR
    ERR:   //reszta programu wyzej jest pomijana
        printf("Free resources\n");
        longjmp(target, connetion_error);
}
void measure()
{
    if(measure1() != 0)
    {
        longjmp(target, measurement_error);
    }

    if(measure2() != 0)
    {
        longjmp(target, measurement_error);
    }

    printf("Measurement taken\n");
    return ;

}
void disconnect_from_device()
{
    printf("Free resources\n");
}
